#download "menu.ric"

#define X (100)
#define Y (64)

#define MAX_BRUSH_SIZE (5) //just a random number

//definition of menu cursor positions
#define menu1 57
#define menu2 48
#define menu3 40
#define menu4 32
#define menu5 24
#define menu6 16


//afterwards the functions should be arranged in the same order as here
void openMenu();
sub navi();
bool openSubMenu(int item);
sub brush(int x, int y);
sub setBrushSize();
void markCircularArea(int xc, int yc);
sub clearScreen();
sub openImage();
sub saveImage();
sub restoreImage();


bool pixels[X][Y];     //bookkeeping of coloured pixels, init values all false
int item[] = {menu1, menu2, menu3, menu4, menu5, menu6};
int menu[] = {menu1};// menu cursor position, MUST be array, init value menu1

bool clearFlag = false;     //exit screen without restoring image
byte drawOption = DRAW_OPT_NORMAL;    //eraser on/off
bool drawSetting = true;
int radius;

task main()
{
 //init sensors
 SetSensorType(OUT_B, SENSOR_TYPE_ROTATION); //Port B, x-axis
 SetSensorType(OUT_C, SENSOR_TYPE_ROTATION); //Port C, y-axis
 ClearSensor(OUT_B); ClearSensor(OUT_C);

 int x, y;
 radius = 1;
 
 while(TRUE)
  {
   if(ButtonPressed(BTNCENTER,false)){
    openMenu();
   }

   x=MotorTachoCount(OUT_B); // get line start
   y=MotorTachoCount(OUT_C);
 
   x = x/10; y = y/-10;  //scale the input to screen
 
   if(x > X - 1) {x = X - 1;} else if (x < 0) x = 0;  //make sure to stay within
   if(y > Y - 1) {y = Y - 1;} else if (y < 0) y = 0;  //boundaries of the array
 
   brush(x, y);  //draw the point, radius under 1 makes 1 pixel line
 }
}


//if possible, this should be in a separate file
void openMenu()
{
  ClearScreen();                        //clear screen to see menu
  GraphicOutEx(0, 0, "menu.ric", menu); //open menu with def cursor position
  navi();                               //handle menu navigation
  ClearScreen();
  if (!clearFlag) {
     restoreImage();    //restore image data
     clearFlag = false;
  }
}


sub navi(){
 int pos = 0;
 bool cont = true; //if the exit button can be remapped to not automatically
                   //program, then this flag should be removed
                       
 while(cont){      //ugly set of if-else >.<
   if(ButtonPressed(BTNLEFT,false)){        //go back in menu
     pos--;
   }
    else if(ButtonPressed(BTNRIGHT,false)){ //go forward in menu
     pos++;
   }

   if(pos < 0) { //make sure to stay within boundaries
    pos = 0;
   }
    else if (pos>ArrayLen(item) - 1){
    pos = ArrayLen(item) - 1;
   }
   
   menu[0]=item[pos]; //update position
   ClearScreen();
   GraphicOutEx(0, 0, "menu.ric", menu, DRAW_OPT_CLEAR_PIXELS); //update menu
   Wait(200);  //wait, otherwise it's difficult to hit the menu items :)
   
   if(ButtonPressed(BTNCENTER, false)){
    cont = openSubMenu(pos);
   }
   
 }
}


bool openSubMenu(int item){ //returns false only when main menu must be closed
Wait(200); //waiting time prevents interference
 switch(item){   //submenu calls to be inserted here, if a submenu is needed
  case 0: //open
      break;
  case 1: //brush
      drawSetting = true;
      drawOption = DRAW_OPT_NORMAL;
      setBrushSize();
      break;
  case 2: //eraser, most likely not efficiently implementable
      drawSetting = false;
      drawOption = DRAW_OPT_INVERT;
      break;
  case 3: //clear
      clearScreen();
      break;
  case 4: //save
      saveImage();
      break;
  case 5: //close menu
      return false;
  default:
      return true;
 }
 Wait(200);
 return true;
}


sub brush(int x, int y){
 //TextOut(0, LCD_LINE1, "X=");  //debug info
 //TextOut(0, LCD_LINE2, "Y=");
 //NumOut(10, LCD_LINE1, x);
 //NumOut(10, LCD_LINE2, y);

 if (radius == 1){
  pixels[x][y] = drawSetting;
  PointOut(x, y, drawOption);
 }
 else { //needs different bookkeeping
  markCircularArea(x, y); //fills a circular area in the array
  CircleOut(x, y, radius, drawOption);
 }
}


sub setBrushSize(){
ClearScreen();
TextOut(0, LCD_LINE4, "Size: ");
int size = 1;
 while(!ButtonPressed(BTNCENTER,true)){
   if(ButtonPressed(BTNLEFT,true)){        //smaller size
     size--;
   }
    else if(ButtonPressed(BTNRIGHT,true)){ //bigger size
     size++;
   }

   if(size<1) { //make sure to stay within range
    size = 1;
   }
    else if (size>MAX_BRUSH_SIZE){
    size = MAX_BRUSH_SIZE;
   }
  NumOut(50, LCD_LINE4, size);
  Wait(200);
 }
radius = size;
}


void markCircularArea(int xc, int yc){
//Bresenham's circle algorithm
//lacks good boundaries check yet.
    int p = 1 - radius;
    int x = 0;
    int y = radius;
    
    //Octants are not numbered mathematically, but clockwise.
    do{
     if(yc + x < X){
        if(xc + y < X) {pixels[xc + y][yc + x] = drawSetting;} // IInd    Octant
        if(xc - y > 0) {pixels[xc - y][yc + x] = drawSetting;} // IIIrd   Octant
     }
     if(yc + y < Y){
        if(xc + x < X) {pixels[xc + x][yc + y] = drawSetting;} // Ist     Octant
        if(xc - x > 0) {pixels[xc - x][yc + y] = drawSetting;} // IVth    Octant
     }
     if(yc - x > 0){
        if(xc + y < X) {pixels[xc + y][yc - x] = drawSetting;} // VIIth   Octant
        if(xc - y > 0) {pixels[xc - y][yc - x] = drawSetting;} // VIth    Octant
     }
     if(yc - y > 0){
        if(xc + x < X) {pixels[xc + x][yc - y] = drawSetting;} // VIIIth  Octant
        if(xc - x > 0) {pixels[xc - x][yc - y] = drawSetting;} // Vth     Octant
     }
          ++x;
          if (p < 0)
             p += 1 + (x << 1);
          else{
               --y;
               p += 1 - ((y - x) << 1) ;
          }
    }while(y >= x);
}

sub clearScreen(){
 clearFlag = true;
 ClearScreen();
 TextOut(0, LCD_LINE4, "Clearing image...");
 int j,k;
 for (j = 0; j < X; j++){
  for (k = 0; k < Y; k++){
   pixels[j][k] = false;
  }
 }
 ClearScreen();
 TextOut(0, LCD_LINE4, "Image erased.");
 Wait(200);
}

sub openImage(){}    //read image data from file
sub saveImage(){}    //write image data to file


sub restoreImage()   //load image data from array
{
 int i,j;
 for(i = 0; i < X; i++){
  for(j = 0; j < Y; j++){
    if(pixels[i][j]){
     PointOut(i, j);
    }
  }
 }
 PointOut(99, 63); //marker showing that update is done
                   //it is not set in bookkeeping to prevent artifacts
}

