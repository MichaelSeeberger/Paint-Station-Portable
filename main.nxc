#download "menu.ric"

#define X (100)
#define Y (64)

//definition of menu cursor positions
#define menu1 58
#define menu2 49
#define menu3 41
#define menu4 33
#define menu5 25
#define menu6 17
#define menu7 9


void openMenu();
bool openSubMenu(int item);
sub brush(int x, int y);
sub navi();
sub saveImage();
sub restoreImage();

bool pixels[X][Y];     //bookkeeping of coloured pixels, init values all false
int item[] = {menu1, menu2, menu3, menu4, menu5, menu6, menu7};
int menu[] = {menu1};// menu cursor position, MUST be array, init value menu1

bool clearFlag = false;
int radius;

task main()
{
 //init sensors
 SetSensorType(OUT_B, SENSOR_TYPE_ROTATION); //Port B, x-axis
 SetSensorType(OUT_C, SENSOR_TYPE_ROTATION); //Port C, y-axis
 ClearSensor(OUT_B); ClearSensor(OUT_C);

 int x, y;
 radius = 1;
 
 while(TRUE)
  {
   if(ButtonPressed(BTNCENTER,false)){
    openMenu();
   }

   x=MotorTachoCount(OUT_B); // get line start
   y=MotorTachoCount(OUT_C);
 
   x = x/10; y = y/-10;  //scale the input to screen
 
   if(x>X-1) {x=X-1;} else if (x<0) x = 0;  //make sure to stay within
   if(y>Y-1) {y=Y-1;} else if (y<0) y = 0;  //boundaries of the array
 
   brush(x,y);  //draw the point, radius under 1 makes 1 pixel line
 }
}



//if possible, this should be in a separate file
sub brush(int x, int y){
 pixels[x][y]=true;
 
 //TextOut(0, LCD_LINE1, "X=");  //debug info
 //TextOut(0, LCD_LINE2, "Y=");
 //NumOut(10, LCD_LINE1, x);
 //NumOut(10, LCD_LINE2, y);
 
 if (radius == 1){
  PointOut(x, y);
 }
 else {
  CircleOut(x, y, radius);
 }
}

void openMenu()
{
  ClearScreen();                        //clear screen to see menu
  GraphicOutEx(0, 0, "menu.ric", menu); //open menu with def cursor position
  navi();                               //handle menu navigation
  ClearScreen();
  if (!clearFlag) restoreImage();        //restore image data
}

sub navi(){
 int pos = 0;
 bool cont = true; //if the exit button can be remapped to not automatically
                       //program, then this flag should be removed
                       
 while(cont){      //ugly set of if-else >.<
   if(ButtonPressed(BTNLEFT,true)){        //go back in menu
     pos--;
   }
    else if(ButtonPressed(BTNRIGHT,true)){ //go forward in menu
     pos++;
   }

   if(pos<0) { //make sure to stay within boundaries
    pos = 0;
   }
    else if (pos>ArrayLen(item)-1){
    pos=ArrayLen(item)-1;
   }
   
   menu[0]=item[pos]; //update position
   ClearScreen();
   GraphicOutEx(0, 0, "menu.ric", menu, DRAW_OPT_CLEAR_PIXELS); //update menu
   Wait(200);  //wait, otherwise it's difficult to hit the menu items :)
   
   if(ButtonPressed(BTNCENTER,false)){
    cont = openSubMenu(pos);
   }
   
 }
}

bool openSubMenu(int item){ //returns false only when main menu must be closed
 switch(item){   //submenu item calls to be inserted here
  case 0: //open
      break;
  case 1: //brush
      break;
  case 2: //eraser
      break;
  case 3: //clear
      break;
  case 4: //games
      break;
  case 5: //save
      break;
  case 6: //exit menu
      return false;
  default:
      return true;
 }
 return true;
}



sub saveImage(){}    //write image data to file

sub restoreImage()   //load image data from array
{
 int i,j;
 for(i = 0; i<X;i++){
  for(j = 0; j<Y;j++){
    if(pixels[i][j]==true){
     PointOut(i,j);
    }
  }
 }
}
